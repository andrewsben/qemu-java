package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <p><pre>QApiUnionDescriptor{name=ChardevBackend, data={file=ChardevFile, serial=ChardevHostdev, parallel=ChardevHostdev, pipe=ChardevHostdev, socket=ChardevSocket, udp=ChardevUdp, pty=ChardevDummy, null=ChardevDummy, mux=ChardevMux, msmouse=ChardevDummy, braille=ChardevDummy, stdio=ChardevStdio, console=ChardevDummy, spicevmc=ChardevSpiceChannel, spiceport=ChardevSpicePort, vc=ChardevVC, ringbuf=ChardevRingbuf, memory=ChardevRingbuf}, innerTypes=null, fields=null, discriminatorField=null}</pre></p>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class ChardevBackend extends QApiType implements QApiUnion {
	public static enum Discriminator {
		file,
		serial,
		parallel,
		pipe,
		socket,
		udp,
		pty,
		_null,
		mux,
		msmouse,
		braille,
		stdio,
		console,
		spicevmc,
		spiceport,
		vc,
		ringbuf,
		memory,
		__NONE;
	}

	@Nonnull
	@JsonProperty("type")
	public Discriminator type;

	@Nonnull
	public final Discriminator getType() {
		return type;
	}

	// union {
	@JsonProperty("file")
	@JsonUnwrapped
	@CheckForNull
	public ChardevFile file;
	@JsonProperty("serial")
	@JsonUnwrapped
	@CheckForNull
	public ChardevHostdev serial;
	@JsonProperty("parallel")
	@JsonUnwrapped
	@CheckForNull
	public ChardevHostdev parallel;
	@JsonProperty("pipe")
	@JsonUnwrapped
	@CheckForNull
	public ChardevHostdev pipe;
	@JsonProperty("socket")
	@JsonUnwrapped
	@CheckForNull
	public ChardevSocket socket;
	@JsonProperty("udp")
	@JsonUnwrapped
	@CheckForNull
	public ChardevUdp udp;
	@JsonProperty("pty")
	@JsonUnwrapped
	@CheckForNull
	public ChardevDummy pty;
	@JsonProperty("null")
	@JsonUnwrapped
	@CheckForNull
	public ChardevDummy _null;
	@JsonProperty("mux")
	@JsonUnwrapped
	@CheckForNull
	public ChardevMux mux;
	@JsonProperty("msmouse")
	@JsonUnwrapped
	@CheckForNull
	public ChardevDummy msmouse;
	@JsonProperty("braille")
	@JsonUnwrapped
	@CheckForNull
	public ChardevDummy braille;
	@JsonProperty("stdio")
	@JsonUnwrapped
	@CheckForNull
	public ChardevStdio stdio;
	@JsonProperty("console")
	@JsonUnwrapped
	@CheckForNull
	public ChardevDummy console;
	@JsonProperty("spicevmc")
	@JsonUnwrapped
	@CheckForNull
	public ChardevSpiceChannel spicevmc;
	@JsonProperty("spiceport")
	@JsonUnwrapped
	@CheckForNull
	public ChardevSpicePort spiceport;
	@JsonProperty("vc")
	@JsonUnwrapped
	@CheckForNull
	public ChardevVC vc;
	@JsonProperty("ringbuf")
	@JsonUnwrapped
	@CheckForNull
	public ChardevRingbuf ringbuf;
	@JsonProperty("memory")
	@JsonUnwrapped
	@CheckForNull
	public ChardevRingbuf memory;
	// }

	@Nonnull
	public static ChardevBackend file(@Nonnull ChardevFile file) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.file;
		self.file = file;
		return self;
	}

	@Nonnull
	public static ChardevBackend serial(@Nonnull ChardevHostdev serial) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.serial;
		self.serial = serial;
		return self;
	}

	@Nonnull
	public static ChardevBackend parallel(@Nonnull ChardevHostdev parallel) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.parallel;
		self.parallel = parallel;
		return self;
	}

	@Nonnull
	public static ChardevBackend pipe(@Nonnull ChardevHostdev pipe) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.pipe;
		self.pipe = pipe;
		return self;
	}

	@Nonnull
	public static ChardevBackend socket(@Nonnull ChardevSocket socket) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.socket;
		self.socket = socket;
		return self;
	}

	@Nonnull
	public static ChardevBackend udp(@Nonnull ChardevUdp udp) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.udp;
		self.udp = udp;
		return self;
	}

	@Nonnull
	public static ChardevBackend pty(@Nonnull ChardevDummy pty) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.pty;
		self.pty = pty;
		return self;
	}

	@Nonnull
	public static ChardevBackend _null(@Nonnull ChardevDummy _null) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator._null;
		self._null = _null;
		return self;
	}

	@Nonnull
	public static ChardevBackend mux(@Nonnull ChardevMux mux) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.mux;
		self.mux = mux;
		return self;
	}

	@Nonnull
	public static ChardevBackend msmouse(@Nonnull ChardevDummy msmouse) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.msmouse;
		self.msmouse = msmouse;
		return self;
	}

	@Nonnull
	public static ChardevBackend braille(@Nonnull ChardevDummy braille) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.braille;
		self.braille = braille;
		return self;
	}

	@Nonnull
	public static ChardevBackend stdio(@Nonnull ChardevStdio stdio) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.stdio;
		self.stdio = stdio;
		return self;
	}

	@Nonnull
	public static ChardevBackend console(@Nonnull ChardevDummy console) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.console;
		self.console = console;
		return self;
	}

	@Nonnull
	public static ChardevBackend spicevmc(@Nonnull ChardevSpiceChannel spicevmc) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.spicevmc;
		self.spicevmc = spicevmc;
		return self;
	}

	@Nonnull
	public static ChardevBackend spiceport(@Nonnull ChardevSpicePort spiceport) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.spiceport;
		self.spiceport = spiceport;
		return self;
	}

	@Nonnull
	public static ChardevBackend vc(@Nonnull ChardevVC vc) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.vc;
		self.vc = vc;
		return self;
	}

	@Nonnull
	public static ChardevBackend ringbuf(@Nonnull ChardevRingbuf ringbuf) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.ringbuf;
		self.ringbuf = ringbuf;
		return self;
	}

	@Nonnull
	public static ChardevBackend memory(@Nonnull ChardevRingbuf memory) {
		ChardevBackend self = new ChardevBackend();
		self.type = Discriminator.memory;
		self.memory = memory;
		return self;
	}

	@Override
	public boolean isValidUnion() {
		int count = 0;
		if (file != null)
			count++;
		if (serial != null)
			count++;
		if (parallel != null)
			count++;
		if (pipe != null)
			count++;
		if (socket != null)
			count++;
		if (udp != null)
			count++;
		if (pty != null)
			count++;
		if (_null != null)
			count++;
		if (mux != null)
			count++;
		if (msmouse != null)
			count++;
		if (braille != null)
			count++;
		if (stdio != null)
			count++;
		if (console != null)
			count++;
		if (spicevmc != null)
			count++;
		if (spiceport != null)
			count++;
		if (vc != null)
			count++;
		if (ringbuf != null)
			count++;
		if (memory != null)
			count++;
		return (count == 1);
	}
}
