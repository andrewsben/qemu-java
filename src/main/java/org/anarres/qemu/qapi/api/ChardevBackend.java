package org.anarres.qemu.qapi.api;

import com.google.gson.annotations.SerializedName;
import java.util.List;
import java.util.Map;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <p><pre>QApiUnionDescriptor{name=ChardevBackend, data={file=ChardevFile, serial=ChardevHostdev, parallel=ChardevHostdev, pipe=ChardevHostdev, socket=ChardevSocket, udp=ChardevUdp, pty=ChardevDummy, null=ChardevDummy, mux=ChardevMux, msmouse=ChardevDummy, braille=ChardevDummy, stdio=ChardevStdio, console=ChardevDummy, spicevmc=ChardevSpiceChannel, spiceport=ChardevSpicePort, vc=ChardevVC, ringbuf=ChardevRingbuf, memory=ChardevRingbuf}, innerTypes=null, fields=null}</pre></p>
 */
public class ChardevBackend extends QApiUnion {
	@SerializedName("file")
	@Nonnull
	public ChardevFile file;
	@SerializedName("serial")
	@Nonnull
	public ChardevHostdev serial;
	@SerializedName("parallel")
	@Nonnull
	public ChardevHostdev parallel;
	@SerializedName("pipe")
	@Nonnull
	public ChardevHostdev pipe;
	@SerializedName("socket")
	@Nonnull
	public ChardevSocket socket;
	@SerializedName("udp")
	@Nonnull
	public ChardevUdp udp;
	@SerializedName("pty")
	@Nonnull
	public ChardevDummy pty;
	@SerializedName("null")
	@Nonnull
	public ChardevDummy _null;
	@SerializedName("mux")
	@Nonnull
	public ChardevMux mux;
	@SerializedName("msmouse")
	@Nonnull
	public ChardevDummy msmouse;
	@SerializedName("braille")
	@Nonnull
	public ChardevDummy braille;
	@SerializedName("stdio")
	@Nonnull
	public ChardevStdio stdio;
	@SerializedName("console")
	@Nonnull
	public ChardevDummy console;
	@SerializedName("spicevmc")
	@Nonnull
	public ChardevSpiceChannel spicevmc;
	@SerializedName("spiceport")
	@Nonnull
	public ChardevSpicePort spiceport;
	@SerializedName("vc")
	@Nonnull
	public ChardevVC vc;
	@SerializedName("ringbuf")
	@Nonnull
	public ChardevRingbuf ringbuf;
	@SerializedName("memory")
	@Nonnull
	public ChardevRingbuf memory;

	@Nonnull
	public static ChardevBackend file(ChardevFile file) {
		ChardevBackend self = new ChardevBackend();
		self.file = file;
		return self;
	}

	@Nonnull
	public static ChardevBackend serial(ChardevHostdev serial) {
		ChardevBackend self = new ChardevBackend();
		self.serial = serial;
		return self;
	}

	@Nonnull
	public static ChardevBackend parallel(ChardevHostdev parallel) {
		ChardevBackend self = new ChardevBackend();
		self.parallel = parallel;
		return self;
	}

	@Nonnull
	public static ChardevBackend pipe(ChardevHostdev pipe) {
		ChardevBackend self = new ChardevBackend();
		self.pipe = pipe;
		return self;
	}

	@Nonnull
	public static ChardevBackend socket(ChardevSocket socket) {
		ChardevBackend self = new ChardevBackend();
		self.socket = socket;
		return self;
	}

	@Nonnull
	public static ChardevBackend udp(ChardevUdp udp) {
		ChardevBackend self = new ChardevBackend();
		self.udp = udp;
		return self;
	}

	@Nonnull
	public static ChardevBackend pty(ChardevDummy pty) {
		ChardevBackend self = new ChardevBackend();
		self.pty = pty;
		return self;
	}

	@Nonnull
	public static ChardevBackend _null(ChardevDummy _null) {
		ChardevBackend self = new ChardevBackend();
		self._null = _null;
		return self;
	}

	@Nonnull
	public static ChardevBackend mux(ChardevMux mux) {
		ChardevBackend self = new ChardevBackend();
		self.mux = mux;
		return self;
	}

	@Nonnull
	public static ChardevBackend msmouse(ChardevDummy msmouse) {
		ChardevBackend self = new ChardevBackend();
		self.msmouse = msmouse;
		return self;
	}

	@Nonnull
	public static ChardevBackend braille(ChardevDummy braille) {
		ChardevBackend self = new ChardevBackend();
		self.braille = braille;
		return self;
	}

	@Nonnull
	public static ChardevBackend stdio(ChardevStdio stdio) {
		ChardevBackend self = new ChardevBackend();
		self.stdio = stdio;
		return self;
	}

	@Nonnull
	public static ChardevBackend console(ChardevDummy console) {
		ChardevBackend self = new ChardevBackend();
		self.console = console;
		return self;
	}

	@Nonnull
	public static ChardevBackend spicevmc(ChardevSpiceChannel spicevmc) {
		ChardevBackend self = new ChardevBackend();
		self.spicevmc = spicevmc;
		return self;
	}

	@Nonnull
	public static ChardevBackend spiceport(ChardevSpicePort spiceport) {
		ChardevBackend self = new ChardevBackend();
		self.spiceport = spiceport;
		return self;
	}

	@Nonnull
	public static ChardevBackend vc(ChardevVC vc) {
		ChardevBackend self = new ChardevBackend();
		self.vc = vc;
		return self;
	}

	@Nonnull
	public static ChardevBackend ringbuf(ChardevRingbuf ringbuf) {
		ChardevBackend self = new ChardevBackend();
		self.ringbuf = ringbuf;
		return self;
	}

	@Nonnull
	public static ChardevBackend memory(ChardevRingbuf memory) {
		ChardevBackend self = new ChardevBackend();
		self.memory = memory;
		return self;
	}

	@Override
	public boolean isUnion() {
		int count = 0;
		if (file != null)
			count++;
		if (serial != null)
			count++;
		if (parallel != null)
			count++;
		if (pipe != null)
			count++;
		if (socket != null)
			count++;
		if (udp != null)
			count++;
		if (pty != null)
			count++;
		if (_null != null)
			count++;
		if (mux != null)
			count++;
		if (msmouse != null)
			count++;
		if (braille != null)
			count++;
		if (stdio != null)
			count++;
		if (console != null)
			count++;
		if (spicevmc != null)
			count++;
		if (spiceport != null)
			count++;
		if (vc != null)
			count++;
		if (ringbuf != null)
			count++;
		if (memory != null)
			count++;
		return (count == 1);
	}
}
