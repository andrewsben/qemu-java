package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <p><pre>QApiTypeDescriptor{name=ImageInfoSpecificQCow2, data={compat=str, *lazy-refcounts=bool, *corrupt=bool}, innerTypes=null}</pre></p>
 */
// QApiTypeDescriptor{name=ImageInfoSpecificQCow2, data={compat=str, *lazy-refcounts=bool, *corrupt=bool}, innerTypes=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class ImageInfoSpecificQCow2 extends QApiType {

	@JsonProperty("compat")
	@Nonnull
	public java.lang.String compat;
	@JsonProperty("lazy-refcounts")
	@CheckForNull
	public java.lang.Boolean lazyRefcounts;
	@JsonProperty("corrupt")
	@CheckForNull
	public java.lang.Boolean corrupt;

	@Nonnull
	public ImageInfoSpecificQCow2 withCompat(java.lang.String value) {
		this.compat = value;
		return this;
	}

	@Nonnull
	public ImageInfoSpecificQCow2 withLazyRefcounts(java.lang.Boolean value) {
		this.lazyRefcounts = value;
		return this;
	}

	@Nonnull
	public ImageInfoSpecificQCow2 withCorrupt(java.lang.Boolean value) {
		this.corrupt = value;
		return this;
	}

	public ImageInfoSpecificQCow2() {
	}

	public ImageInfoSpecificQCow2(java.lang.String compat, java.lang.Boolean lazyRefcounts, java.lang.Boolean corrupt) {
		this.compat = compat;
		this.lazyRefcounts = lazyRefcounts;
		this.corrupt = corrupt;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("compat");
		names.add("lazy-refcounts");
		names.add("corrupt");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("compat".equals(name))
			return compat;
		if ("lazy-refcounts".equals(name))
			return lazyRefcounts;
		if ("corrupt".equals(name))
			return corrupt;
		return super.getFieldByName(name);
	}
}
