package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <p><pre>QApiUnionDescriptor{name=TransactionAction, data={blockdev-snapshot-sync=BlockdevSnapshot, drive-backup=DriveBackup, abort=Abort, blockdev-snapshot-internal-sync=BlockdevSnapshotInternal}, innerTypes=null, fields=null, discriminatorField=null}</pre></p>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class TransactionAction extends QApiType implements QApiUnion {
	public static enum Discriminator {
		blockdevSnapshotSync,
		driveBackup,
		abort,
		blockdevSnapshotInternalSync,
		__NONE;
	}

	@Nonnull
	@JsonProperty("type")
	public Discriminator type;

	@Nonnull
	public final Discriminator getType() {
		return type;
	}

	// union {
	@JsonProperty("blockdev-snapshot-sync")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevSnapshot blockdevSnapshotSync;
	@JsonProperty("drive-backup")
	@JsonUnwrapped
	@CheckForNull
	public DriveBackup driveBackup;
	@JsonProperty("abort")
	@JsonUnwrapped
	@CheckForNull
	public Abort abort;
	@JsonProperty("blockdev-snapshot-internal-sync")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevSnapshotInternal blockdevSnapshotInternalSync;
	// }

	@Nonnull
	public static TransactionAction blockdevSnapshotSync(@Nonnull BlockdevSnapshot blockdevSnapshotSync) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.blockdevSnapshotSync;
		self.blockdevSnapshotSync = blockdevSnapshotSync;
		return self;
	}

	@Nonnull
	public static TransactionAction driveBackup(@Nonnull DriveBackup driveBackup) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.driveBackup;
		self.driveBackup = driveBackup;
		return self;
	}

	@Nonnull
	public static TransactionAction abort(@Nonnull Abort abort) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.abort;
		self.abort = abort;
		return self;
	}

	@Nonnull
	public static TransactionAction blockdevSnapshotInternalSync(@Nonnull BlockdevSnapshotInternal blockdevSnapshotInternalSync) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.blockdevSnapshotInternalSync;
		self.blockdevSnapshotInternalSync = blockdevSnapshotInternalSync;
		return self;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("blockdev-snapshot-sync");
		names.add("drive-backup");
		names.add("abort");
		names.add("blockdev-snapshot-internal-sync");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("blockdev-snapshot-sync".equals(name))
			return blockdevSnapshotSync;
		if ("drive-backup".equals(name))
			return driveBackup;
		if ("abort".equals(name))
			return abort;
		if ("blockdev-snapshot-internal-sync".equals(name))
			return blockdevSnapshotInternalSync;
		return super.getFieldByName(name);
	}

	@Override
	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (blockdevSnapshotSync != null)
			count++;
		if (driveBackup != null)
			count++;
		if (abort != null)
			count++;
		if (blockdevSnapshotInternalSync != null)
			count++;
		return (count == 1);
	}
}
